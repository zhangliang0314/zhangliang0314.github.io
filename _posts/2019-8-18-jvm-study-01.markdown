---
layout:     post
title:      "类加载学习笔记一 "
subtitle:   "类加载机制 "
date:       2019-8-18 13:00:00
author:     "zhangliang"
header-img: "img/post-think-try-write.jpg"
tags:
    - JVM
---

### 类加载机制

#### 一. 定义
虚拟机把<u>描述类的数据从Class文件加载到内存</u>，并<u>对数据进行校验，转换解析</u>和<u>初始化</u>，最终形成可以被虚拟机直接使用的java类型。


#### 二. 生命周期
 加载，验证，准备，解析，初始化，使用，卸载。
    
 当下列情况生命周期结束
* 执行了System.exit()方法
* 程序正常执行结束
* 程序在执行过程中遇到异常或错误而终止
*  由于操作系统出现错误而导致java虚拟机进程终止


#### 三. 时机
  类型的加载，连接，初始化都是在程序运行期间完成的
    
   * 优点：带来更大灵活性和更多可能性（可以再运行时再指定实现类，可以在运行时加载其他文件）
   * 缺点：增加性能开销


#### 四. 具体过程

1. 加载
查找并加载类的二进制数据

* 根据类的全限定名来将类的.class文件中的二进制数据读入到内存中
* 将其放在运行时数据区的方法区中
* 在内存中创建一个java.lang.Class对象来封装在方法去中数据结构，座位访问入口

注意：
①JVM规范允许类加载器在预料某各类将要被使用就加载它，如果预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误LinkeageError。如果该类一直没有被程序主动使用，那么类加载器就不会报告错误。
②数组类型本身不通过类加载器去创建，他是由JVM直接创建的，但是数组类的元素类型（指数组去掉所有维度后的类型）是由类加载器创建的。


2. 验证
确保被加载类的正确性

* 文件格式验证
* 元数据验证
* 字节码验证
* 符号引用验证

3.准备
为类的静态变量分配内存，并将其初始化为默认值

4.解析
虚拟机将常量池中的符号引用替换为直接引用的过程

5.初始化
为类的静态变量赋正确的初始值；也就是执行类构造器<clinit>()方法的过程：即由编译器自动收集类中的所有静态变量的赋值语句和静态语句块的语句合产生的。

* 在静态变量的声明出进行初始化
* 在静态代码块中进行初始化

时机：虚拟机规范严格规定有且只有下列情况必须立即对类进行初始化，即“首次主动使用”才初始化

* 使用new创建类的实例
* 访问某个类或接口的静态变量，或对其赋值
* 调用类的静态方法
* 反射调用该类
* 初始化一个类的子类
* JVM启动时被指定为主类（包含main方法）的类
* java.lang.invoke.MethodHandle实例最后的解析结果㨫REF_getStatic，REF_putStatic，REF_invokeStatic的方法句柄。

注意：
* 静态语句块只能访问到定义在它之前的变量，在他之后定义的变量，只能赋值，不能访问。
* 如果一个类没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为该类生成<clinit>()方法。
* 接口中不能使用静态语句块，但是会有静态变量的初始化赋值操作。
* 执行接口的<clinit>()方法不必先执行父接口的<clinit>()方法，只有父接口定义的变量使用时，父接口才会初始化。
* 接口的实现类在初始化时也一样不会执行接口的初始化。


步骤：
* 如果该类还没有被加载和连接，那就先进行加载和连接
* 如果类存在直接父类，且父类还没有被初始化，那就先初始化直接父类
* 如果类中存在初始化语句，那就依次执行这些初始化语句。


```
/*
    对于静态字段来说，只有直接定义了该字段的类才会被初始化
    当一个类在初始化时，要求其父类已经全部初始化完毕

    -XX:+TraceClassLoading:用于追踪类的加载信息并打印出来
        -XX:+<option> 表示开启option选项
        -XX:-<option> 表示关闭option选项
        -XX:<option>=<value> 表示将option选项的值设置为value
 */
public class MyTest1 {
    public static void main(String[] args){
        System.out.println(MyChild1.str);
//        System.out.println(MyChild1.str2);
    }
}
class Myparent1{
    public static String str = "hello world";
    static {
        System.out.println("MyParent1 static block");
    }

}

class MyChild1 extends Myparent1{
//    public static String str2 = "hello world2";
    static {
        System.out.println("MyChild1 static block");
    }
}

```

```
/*
    常量在编译阶段会存入到调用这个常量的方法所在的类的常量池中
    本质上，调用类并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化
        （在这里，是将常量str放到MyTest2的常量池中，之后MyTest2和MyParent2就没有任何关系了，
          甚至可以将MyParent2的class文件删除都可以运行）

    助记符：
        ldc：表示将int，float，String类型的常量值从常量池中推送至栈顶
        bipush：表示将单字节（-128 - 127）的常量值推送至栈顶
        sipush：表示将一个短整型（-32768 - 32767）常量值推送至栈顶
        iconst_1:表示将int类型1推送至栈顶（iconst_m1 - iconst_5）
 */
public class MyTest2 {
    public static void main(String[] args){
        System.out.println(MyParent2.str);
    }
}


class MyParent2{
    public static final String str = "hello world";

    public static final short s = 127;

    public static final int i = 128;

    static {
        System.out.println("MyParent2 static block");
    }
}
```

```
/*
    当一个常量的值并非在编译期间可以确定的，那么其值就不会被放到调用类的常量池中
    这是程序在运行时，会导致主动使用这个常量所在的类，会导致这个类被初始化
 */
public class MyTest3 {
    public static void main(String[] args){
        System.out.println(MyParent3.str);
    }
}

class MyParent3{
    public static final String str = UUID.randomUUID().toString();

    static {
        System.out.println("MyParent3 static block");
    }

}

```

```
/*
    对于数组来说，其类型是在JVM运行期间动态生成的，
        引用类型：表示为[Lcom.zl.jvm.classloader.MyParent4;其父类型是Object
        原始类型：如int表示为[I;[I

    对于数组来说，JavaDoc经常将构成数组的元素称为component，实际上就是将数组降低一个维度后的类型。

    助记符：
        anewarray：表示创建一个引用类型（如类，接口，数组）的数组，并将其引用值压入栈顶
        newarray:表示创建一个指定的原始类型（如int，float，char）的数组并将其引用值压入栈顶
 */
public class MyTest4 {
    public static void main(String[] args){
//        MyParent4 myParent4 = new MyParent4();
        MyParent4[] myParent4s = new MyParent4[1];
        System.out.println(myParent4s.getClass());
        MyParent4[][] myParent4s1= new MyParent4[1][1];
        System.out.println(myParent4s1.getClass());
        System.out.println(myParent4s.getClass().getSuperclass());
        System.out.println(myParent4s1.getClass().getSuperclass());

        System.out.println("--------------");

        int[] inta = new int[1];
        System.out.println(inta.getClass());
        System.out.println(inta.getClass().getSuperclass());
    }
}

class MyParent4{
    static {
        System.out.println("MyParent4 static block");
    }
}

```


```
/*
    当一个接口在初始化时，并不要求其父接口都完成了初始化
    只有在真正使用到父接口的时候（如直接引用接口中所定义的常量时），才会初始化

 */
public class MyTest5 {
    public static void main(String[] args){
        System.out.println(MyChild5.b);
    }
}

interface MyParentr5{
    public static final int a = 5;//接口中的变量都是public static final
    public static int d = new Random().nextInt(3);

}

interface MyChild5 extends MyParentr5{
    public static final int b = 6;
    public static int c = new Random().nextInt(2);
}
```

```
public class MyTest6 {

    public static void main(String[] args){
        Singleton singleton = Singleton.getInstance();

        System.out.println(Singleton.conter1);
        System.out.println(Singleton.conter2);

    }
}

class Singleton{
    public static int conter1;//0
    private static Singleton singleton = new Singleton();//调用构造方法赋初值
    private Singleton(){
        conter1++;//1
        conter2++;//1
    }

    public static int conter2 = 0;//初始化阶段赋值0

    public static Singleton getInstance(){
        return singleton;
    }
}
/*
    main方法调用Singleton的静态方法，为主动使用，需要先对该类加载连接初始化
    准备阶段首先赋初值都为0，然后初始化阶段再赋指定的值
 */
```
